<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.ss1742.com</id>
    <title>1742·小博文</title>
    <updated>2019-07-21T16:22:54.565Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.ss1742.com"/>
    <link rel="self" href="https://blog.ss1742.com/atom.xml"/>
    <subtitle>这是我的真博客</subtitle>
    <logo>https://blog.ss1742.com/images/avatar.png</logo>
    <icon>https://blog.ss1742.com/favicon.ico</icon>
    <rights>All rights reserved 2019, 1742·小博文</rights>
    <entry>
        <title type="html"><![CDATA[a标签中 active hover link visited 设置顺序]]></title>
        <id>https://blog.ss1742.com/post/a-biao-qian-zhong-active-hover-link-visited-she-zhi-shun-xu</id>
        <link href="https://blog.ss1742.com/post/a-biao-qian-zhong-active-hover-link-visited-she-zhi-shun-xu">
        </link>
        <updated>2019-07-21T16:15:11.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>a:link<br>
a:visited<br>
a:hover<br>
a:active</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[禁止浏览器事件]]></title>
        <id>https://blog.ss1742.com/post/jin-zhi-liu-lan-qi-shi-jian</id>
        <link href="https://blog.ss1742.com/post/jin-zhi-liu-lan-qi-shi-jian">
        </link>
        <updated>2019-07-21T16:12:40.000Z</updated>
        <content type="html"><![CDATA[<h4 id="禁用事件冒泡">禁用事件冒泡</h4>
<blockquote>
<p>event.stopPropagation()</p>
</blockquote>
<h4 id="禁止默认事件">禁止默认事件</h4>
<blockquote>
<p>event.preventDefault()</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[jsonp 原理]]></title>
        <id>https://blog.ss1742.com/post/jsonp-yuan-li</id>
        <link href="https://blog.ss1742.com/post/jsonp-yuan-li">
        </link>
        <updated>2019-07-20T14:20:49.000Z</updated>
        <content type="html"><![CDATA[<p>尽管浏览器有同源策略，但是 <code>&lt;script&gt;</code> 标签的 <code>src</code> 属性不会被同源策略所约束，可以获取任意服务器上的脚本并执行。<code>jsonp</code> 通过插入 <code>script</code> 标签的方式来实现跨域，参数只能通过 <code>url</code> 传入，仅能支持 <code>get</code> 请求。</p>
<h4 id="原理">原理</h4>
<ul>
<li>创建 <code>callback</code> 方法</li>
<li>插入 <code>script</code> 标签</li>
<li>后台接受到请求，解析前端传过去的 <code>callback</code> 方法，返回该方法的调用，并且数据作为参数传入该方法</li>
<li>前端执行服务器返回的方法调用</li>
</ul>
<h4 id="实现">实现</h4>
<pre><code class="language-js">function jsonp({ url, params, callback }) {
	return new Promise((resolve, reject) =&gt; {
		let script = document.createElement('script');
		window[callback] = function(data) {
			resolve(data);
			document.body.removeChild(script);
		}
		params = { ...params, callback };
		let arrs = [];
		for (let key in params) {
			arrs.push(`${key}=${params[key]}`);
		}
		script.src = `${url}?${arrs.join('&amp;')}`;
		document.body.appendChild(script);
	})
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[this 指向]]></title>
        <id>https://blog.ss1742.com/post/this-zhi-xiang</id>
        <link href="https://blog.ss1742.com/post/this-zhi-xiang">
        </link>
        <updated>2019-07-20T14:11:11.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>
<p><code>this</code>，谁调用指谁</p>
</li>
<li>
<p>构造函数的优先级(访问权限) &gt; 原型链</p>
</li>
<li>
<p><code>new</code> 的时候，<code>this</code> 就会指向 <code>new</code> 出来的对象</p>
</li>
<li>
<p>箭头函数</p>
</li>
</ul>
<ol>
<li>箭头函数相当于 <code>bind，会改变</code>this` 的指向</li>
<li>箭头函数的 <code>this</code> 是他父级的 <code>this</code></li>
<li>箭头函数把 <code>this</code> 固定到他父级的同级作用</li>
</ol>
<h4 id="能改变-this-指向的关键词">能改变 <code>this</code> 指向的关键词</h4>
<ul>
<li>
<p>bind</p>
</li>
<li>
<p>apply</p>
</li>
<li>
<p>call</p>
</li>
<li>
<p>一般函数 <code>this</code> 指向在执行的时候绑定</p>
</li>
<li>
<p>箭头函数中的 <code>this</code> 是在定义函数的时候绑定</p>
</li>
<li>
<p>严格模式</p>
</li>
</ul>
<ol>
<li>非严格模式下默认指向 <code>window</code></li>
<li>严格模式下传 <code>null</code> 指向 <code>null</code>，不传或者传 <code>undefined</code> 都指向 <code>undefined</code>，即在严格模式下，没有写执行主体，<code>this</code> 指向是 <code>undefined</code></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git rebase 和 git merge 的区别]]></title>
        <id>https://blog.ss1742.com/post/git-rebase-he-git-merge-de-qu-bie</id>
        <link href="https://blog.ss1742.com/post/git-rebase-he-git-merge-de-qu-bie">
        </link>
        <updated>2019-07-19T15:26:10.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p><code>git rebase</code> 和 <code>git merge</code> 一样都是用于从一个分支获取并且合并到当前分支</p>
</blockquote>
<h3 id="git-merge">git merge</h3>
<ul>
<li>将分支切换到 <code>master</code> 上去：<code>git checkout master</code></li>
<li>将分支 <code>feature</code> 合并到当前分支（即 <code>master</code> 分支）上：<code>git merge feature</code></li>
</ul>
<p>特点</p>
<ul>
<li>只处理一次冲突</li>
<li>引入了一次合并的历史记录，合并后的所有 <code>commit</code> 会按照提交时间从旧到新排列</li>
<li>所有的过程信息更多，可能会提高之后查找问题的难度</li>
</ul>
<h3 id="git-rebase">git rebase</h3>
<ul>
<li>改变当前分支从 <code>master</code> 上拉出分支的位置</li>
<li>没有多余的合并历史的记录，且合并后的 <code>commit</code> 顺序不一定按照 <code>commit</code> 的提交时间排列</li>
<li>可能会多次解决同一个地方的冲突（有 <code>squash</code> 来解决）</li>
<li>更清爽一些，<code>master</code> 分支上每个 <code>commit</code> 点都是相对独立完整的功能单元</li>
</ul>
<h3 id="总结">总结</h3>
<p>当需要保留详细的合并信息的时候建议使用 <code>git merge</code>，特别是需要将分支合并进入 <code>master</code> 分支时；当发现自己修改某个功能时，频繁进行了 <code>git commit</code> 提交时，发现其实过多的提交信息没有必要时，可以尝试 <code>git rebase</code>。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git 提交 types]]></title>
        <id>https://blog.ss1742.com/post/git-ti-jiao-types</id>
        <link href="https://blog.ss1742.com/post/git-ti-jiao-types">
        </link>
        <updated>2019-07-19T15:23:13.000Z</updated>
        <content type="html"><![CDATA[<pre><code>feat: 新功能(feature)
fix: 修补(bug)
docs: 文档(documentation)
style: 格式(不影响代码运行的变动)
refactor: 重构(即不是新增功能，也不是修改bug的代码变动)
test: 增加测试
chore: 构建过程或辅助工具的变动
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[《深入浅出 React 和 Redux》[2]]]></title>
        <id>https://blog.ss1742.com/post/lesslessshen-ru-qian-chu-react-he-reduxgreatergreater-2</id>
        <link href="https://blog.ss1742.com/post/lesslessshen-ru-qian-chu-react-he-reduxgreatergreater-2">
        </link>
        <updated>2019-07-18T15:56:45.000Z</updated>
        <content type="html"><![CDATA[<h2 id="第2章-react-组件">第2章 React 组件</h2>
<h3 id="易于维护的设计要素">易于维护的设计要素</h3>
<blockquote>
<p>高内聚 把逻辑紧密相关的内容放在一个组件内<br>
低耦合 每个组件尽量独立，依赖关系尽量弱化</p>
</blockquote>
<h3 id="组件的数据">组件的数据</h3>
<p>对外用 <code>props</code>，对内用 <code>state</code></p>
<h4 id="proptypes-检查">propTypes 检查</h4>
<pre><code class="language-js">Person.propTypes = {
    name: PropTypes.string.isRequired,
    age: PropTypes.number
}

// 添加默认
Person.defaultProps = {
    name: ''
}
</code></pre>
<p>因为检查会消耗 <code>CPU</code> 资源，所以可以在开发的时候加上来避免一些错误，在发布的时候可以通过 <code>babel-react-optimize</code> 来去掉</p>
<h3 id="生命周期">生命周期</h3>
<p>本书中 <code>react</code> 版本 <code>v15.4</code> 太老，<code>v16.+</code> 部分生命周期方法废除，这一块后面总结</p>
<h4 id="constructor">constructor</h4>
<ol>
<li>初始化 <code>state</code></li>
<li>绑定成员函数的 <code>this</code> 环境</li>
</ol>
<p>tips</p>
<blockquote>
<p>this.foo = ::this.foo &lt;==&gt; this.foo = this.foo.bind(this)</p>
</blockquote>
<p>...</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[《深入浅出 React 和 Redux》[1]]]></title>
        <id>https://blog.ss1742.com/post/lesslessshen-ru-qian-chu-react-he-reduxgreatergreater-1</id>
        <link href="https://blog.ss1742.com/post/lesslessshen-ru-qian-chu-react-he-reduxgreatergreater-1">
        </link>
        <updated>2019-07-18T15:40:30.000Z</updated>
        <content type="html"><![CDATA[<h2 id="第1章">第1章</h2>
<h3 id="简介">简介</h3>
<ul>
<li><code>react</code> 不支持比 <code>IE8</code> 更低版本浏览器</li>
<li>通过组件（独立可重用的代码）开发应用。基于组件的应用开发是广泛使用的软件开发模式，用 <code>分而治之</code> 的方法，把一个大的应用分解成若干小的组件，每个组件只关注于某个小范围的特定功能</li>
</ul>
<h3 id="jsx">JSX</h3>
<ul>
<li><code>JSX</code>，是 <code>JavaScript</code>的语法扩展，让我们在 <code>JavaScript</code> 中可以编写像 <code>HTML</code> 一样的代码</li>
</ul>
<h4 id="进步还是倒退问题">进步还是倒退问题</h4>
<blockquote>
<p><code>JSX</code> 中的 <code>onClick</code> 和 <code>HTML</code> 中的 <code>onclick</code> 对比</p>
</blockquote>
<ul>
<li>
<p><code>HTML</code> 中的 <code>onclick</code></p>
<ol>
<li>处理函数是在全局环境下执行的，这污染全局环境，很容易产生意料不到的效果</li>
<li>给很多 <code>DOM</code> 添加 <code>onclick</code> 事件，可能会影响网页的性能，需要处理的事件函数越多，性能就越低</li>
<li>使用 <code>onclick</code> 的 <code>DOM</code>，如果要动态删掉，需要把对应的时间处理器注销，否则可能造成内存写漏并且不容易追踪到 <code>bug</code></li>
</ol>
</li>
<li>
<p><code>JSX</code></p>
<ol>
<li><code>JSX</code> 组件的 <code>onClick</code>，并没有直接使用 <code>onclick</code> 的 <code>html</code>，而是使用事件委托处理点击事件，最后都只在 <code>DOM</code> 树上添加了一个事件处理函数，挂在最顶层的 <code>DOM</code> 节点上</li>
<li><code>react</code> 中组件的生命周期，在 <code>unmount</code> 的时候自然能够清理所有相关的事件处理函数，内存泄露的问题得以解决</li>
</ol>
</li>
</ul>
<h3 id="eject">eject</h3>
<blockquote>
<p>npm run eject</p>
</blockquote>
<p>&quot;弹射&quot;（暴露并修改）<code>webpack</code>、<code>package.json</code> 等配置</p>
<h3 id="react-的工作方式">react 的工作方式</h3>
<p><code>react</code> 的理念</p>
<p><code>UI = render(data)</code></p>
<h3 id="virtual-dom">Virtual DOM</h3>
<p><code>DOM</code> 是结构化文本的抽象表达形式，特定于 <code>Web</code> 环境中</p>
<p><code>Virtual DOM</code> 是对 <code>DOM</code> 树的抽象，只是存在于 <code>JavaScript</code> 空间的树形结构</p>
<h3 id="tips">Tips</h3>
<p>设计原则：做同一件事的代码应该有高耦合性。<br>
纯函数：没有任何副作用，输出完全依赖输入的函数。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[react diff 原理浅析]]></title>
        <id>https://blog.ss1742.com/post/react-diff</id>
        <link href="https://blog.ss1742.com/post/react-diff">
        </link>
        <updated>2019-07-16T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<p><code>React</code> 通过制定大胆的 <code>diff</code> 策略，将 <code>O(n3)</code> 复杂度的问题转换成 <code>O(n)</code> 复杂度的问题；<br>
<code>React</code> 是如何将 <code>O(n3)</code> 复杂度的问题转换成 <code>O(n)</code> 的？</p>
<ul>
<li>只进行同级比较</li>
<li>不同类的 <code>React</code> 组件会被当做完全不同的 <code>DOM</code> 结构而被完全替换</li>
<li><code>key prop</code>：开发人员可以通过给 <code>Virtual DOM</code> 一个唯一的 <code>key</code> 属性暗示 <code>React</code> 这是同一个 <code>DOM</code> 结构，反之若 <code>key</code> 值不同则会被当做完全不同的 <code>DOM</code> 结构。</li>
</ul>
<p><code>React</code> 通过分层求异的策略，对 <code>tree diff</code> 进行算法优化；<br>
<code>React</code> 通过相同类生成相似树形结构，不同类生成不同树形结构的策略，对 <code>component diff</code> 进行算法优化。<br>
<code>React</code> 通过设置唯一 <code>key</code> 的策略，对 <code>element diff</code> 进行算法优化；</p>
<p>建议，在开发组件时，保持稳定的 <code>DOM</code> 结构会有助于性能的提升；<br>
建议，在开发过程中，尽量减少类似将最后一个节点移动到列表首部的操作，当节点数量过大或更新操作过于频繁时，在一定程度上会影响 <code>React</code> 的渲染性能。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Promise.all 实现原理]]></title>
        <id>https://blog.ss1742.com/post/promiseall-shi-xian-yuan-li</id>
        <link href="https://blog.ss1742.com/post/promiseall-shi-xian-yuan-li">
        </link>
        <updated>2019-07-16T13:45:08.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-js">Promise.prototype.all = function(promises) {
    return new Promise((resolve, reject) =&gt; {
        if (!isArray(promises)) {
            return reject(new TypeError('Arguments not Array'));
        }
        let resolves = 0;
        let len = promises.length;
        let result = [];
        for (let p of promises) {
            Promise.resolve(p).then(res =&gt; {
                resolves++;
                result.push(res);
                if (resolves === len) {
                    resolve(result);
                }
            }, rej =&gt; {
                return rekect(rej);
            })
        }
    })
}
</code></pre>
]]></content>
    </entry>
</feed>