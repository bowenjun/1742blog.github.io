<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.ss1742.com</id>
    <title>1742·小博文</title>
    <updated>2019-07-25T17:09:25.778Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.ss1742.com"/>
    <link rel="self" href="https://blog.ss1742.com/atom.xml"/>
    <subtitle>这是我的真博客</subtitle>
    <logo>https://blog.ss1742.com/images/avatar.png</logo>
    <icon>https://blog.ss1742.com/favicon.ico</icon>
    <rights>All rights reserved 2019, 1742·小博文</rights>
    <entry>
        <title type="html"><![CDATA[bfc]]></title>
        <id>https://blog.ss1742.com/post/bfc</id>
        <link href="https://blog.ss1742.com/post/bfc">
        </link>
        <updated>2019-07-25T17:03:35.000Z</updated>
        <content type="html"><![CDATA[<p><code>Box</code> 是 <code>CSS</code> 布局的对象和基本单位，页面是由若干个 <code>Box</code> 组成的。<br>
元素的类型 和 <code>display</code> 属性，决定了这个 <code>Box</code> 的类型。不同类型的 <code>Box</code> 会参与不同的 <code>Formatting Context</code>。</p>
<h3 id="formatting-context">Formatting Context</h3>
<p><code>Formatting Context</code> 是页面的一块渲染区域，并且有一套渲染规则，决定了其子元素将如何定位，以及和其它元素的关系和相互作用。<br>
<code>Formatting Context</code> 有 <code>BFC (Block formatting context)</code>，<code>IFC (Inline formatting context)</code>，<code>FFC (Flex formatting context)</code> 和 <code>GFC (Grid formatting context)</code>。<code>FFC</code> 和 <code>GFC</code> 为 <code>CC3</code> 中新增。</p>
<h3 id="bfc-布局规则">BFC 布局规则</h3>
<ul>
<li><code>BFC</code> 内，盒子依次垂直排列。</li>
<li><code>BFC</code> 内，两个盒子的垂直距离由 <code>margin</code> 属性决定。属于同一个 <code>BFC</code> 的两个相邻 <code>Box</code> 的 <code>margin</code> 会发生重叠【符合合并原则的 <code>margin</code> 合并后是使用大的 <code>margin</code>】</li>
<li><code>BFC</code> 内，每个盒子的左外边缘接触内部盒子的左边缘（对于从右到左的格式，- 右边缘接触）。即使在存在浮动的情况下也是如此。除非创建新的 <code>BFC</code>。</li>
<li><code>BFC</code> 的区域不会与 <code>float box</code> 重叠。</li>
<li><code>BFC</code> 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li>
<li>计算 <code>BFC</code> 的高度时，浮动元素也参与计算。</li>
</ul>
<h3 id="如何创建-bfc">如何创建 BFC</h3>
<ul>
<li>根元素</li>
<li>浮动元素（<code>float</code> 属性不为 <code>none</code>）</li>
<li><code>position</code> 为 <code>absolute</code> 或 <code>fixed</code></li>
<li><code>overflow</code> 不为 <code>visible</code> 的块元素</li>
<li><code>display</code> 为 <code>inline-block</code>, <code>table-cell</code>, <code>table-caption</code></li>
</ul>
<h3 id="bfc-的应用">BFC 的应用</h3>
<ul>
<li>防止 <code>margin</code>  重叠 (同一个 <code>BFC</code> 内的两个两个相邻 <code>Box</code> 的 <code>margin</code> 会发生重叠，触发生成两个 <code>BFC</code>，即不会重叠)</li>
<li>清除内部浮动 (创建一个新的 <code>BFC</code>，因为根据 <code>BFC</code> 的规则，计算 <code>BFC</code> 的高度时，浮动元素也参与计算)</li>
<li>自适应多栏布局 (<code>BFC</code> 的区域不会与 <code>float box</code> 重叠。因此，可以触发生成一个新的 <code>BFC</code>)</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[前端管理]]></title>
        <id>https://blog.ss1742.com/post/qian-duan-guan-li</id>
        <link href="https://blog.ss1742.com/post/qian-duan-guan-li">
        </link>
        <updated>2019-07-24T14:00:55.000Z</updated>
        <content type="html"><![CDATA[<p>管理上你强调什么就会得到什么</p>
<ol>
<li>因成员存在对业务的熟悉度，常处于救火队员状态在不同业务中流转，对提测质量是无益的，此处需要团队和业务的对接保持相对的固定</li>
<li>成员的能力和态度对产出质量有直接影响，此处对应的可采取提测 bug 数、reopen 数作为绩效参考指标之一，不同团队内部定期的进行 codereview 并进一步共识最佳实践，产出业务对应的自测 checklist，这部分有能力的可以结合自动化测试进行去人肉回归</li>
<li>认知模型的植入，提升成员对自测的重视并规范到日常行为</li>
<li>正面标杆的树立，质量存在明显问题的成员一对一研究和辅导</li>
<li>（非常规方式）必要的人员优化</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[浏览器内核]]></title>
        <id>https://blog.ss1742.com/post/liu-lan-qi-nei-he</id>
        <link href="https://blog.ss1742.com/post/liu-lan-qi-nei-he">
        </link>
        <updated>2019-07-24T02:19:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="ie">IE</h3>
<p>内核 <code>trident</code></p>
<p>识别码 <code>-ms-</code></p>
<h3 id="chrome">Chrome</h3>
<p>内核 <code>blink</code></p>
<p>识别码 <code>-webkit</code></p>
<h3 id="safari">Safari</h3>
<p>内核 <code>webkit</code></p>
<p>识别码 <code>-webkit</code></p>
<h3 id="firefox">Firefox</h3>
<p>内核 <code>gecko</code></p>
<p>识别码 <code>-moz-</code></p>
<h3 id="opera">Opera</h3>
<p>内核 <code>Presto</code> -&gt; <code>blink</code></p>
<p>识别码 <code>-o-</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[7.23有感]]></title>
        <id>https://blog.ss1742.com/post/723-you-gan</id>
        <link href="https://blog.ss1742.com/post/723-you-gan">
        </link>
        <updated>2019-07-23T16:14:15.000Z</updated>
        <content type="html"><![CDATA[<p>发现问题是好事。</p>
<h3 id="表达能力很糟糕">表达能力很糟糕</h3>
<ol>
<li>读书少，平时阅读的文章也没有仔细品味遣词用字</li>
<li>极度缺乏自信</li>
<li>缺乏独立思考，思维固化</li>
</ol>
<h3 id="专业能力很糟糕">专业能力很糟糕</h3>
<ol>
<li>目前应该用几年积累发光发热了，却一无所长</li>
<li>太浮躁，并不是感觉技术无用，而是不知道从何处下手</li>
</ol>
<h2 id="目标与计划">目标与计划</h2>
<ol>
<li>一定要坚持每日博客，技术慢慢的提高深度</li>
<li>看书，看书看书，看书看书看书，无论什么书都看</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[异步加载 js 脚本]]></title>
        <id>https://blog.ss1742.com/post/yi-bu-jia-zai-js-jiao-ben</id>
        <link href="https://blog.ss1742.com/post/yi-bu-jia-zai-js-jiao-ben">
        </link>
        <updated>2019-07-23T16:04:39.000Z</updated>
        <content type="html"><![CDATA[<p><code>script</code> 中加入 <code>async(html5)</code> 或者 <code>defer(html4)</code> 属性，脚本会异步加载。</p>
<h3 id="区别">区别</h3>
<h4 id="defer">defer</h4>
<ol>
<li><code>defer</code> 要等到页面在内存中正常渲染结束，在 <code>window.onload</code> 之前执行</li>
<li>如果有多个 <code>defer</code>，会按照在页面的出现顺序加载</li>
</ol>
<h4 id="async">async</h4>
<ol>
<li><code>async</code> 一旦下载完，渲染引擎就会中断渲染，执行这个脚本，再继续渲染</li>
<li>多个 <code>async</code> 不能保证顺序</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[http content-type]]></title>
        <id>https://blog.ss1742.com/post/http-content-type</id>
        <link href="https://blog.ss1742.com/post/http-content-type">
        </link>
        <updated>2019-07-23T14:44:06.000Z</updated>
        <content type="html"><![CDATA[<p><code>content-type</code> 是 <code>http</code> 实体首部字段，用来说明请求或返回的消息主体是用何种方式编码，在 <code>request header</code> 和 <code>response header</code> 中都存在</p>
<h3 id="类型">类型</h3>
<h4 id="applicationx-www-form-urlencoded">application/x-www-form-urlencoded</h4>
<p>浏览器原生 <code>form</code> 表单<br>
提交数据按照 key1=val1&amp;key2=val2的方式进行编码，<code>key</code> 和 <code>value</code> 都进行了 <code>url</code> 转码</p>
<pre><code>POST [http://www.example.com](http://www.example.com) HTTP/1.1 
Content-Type: application/x-[www-form-urlencoded](http://www-form-urlencoded);charset=utf-8 

title=test&amp;sub%5B%5D=1&amp;sub%5B%5D=2&amp;sub%5B%5D=3 
</code></pre>
<h4 id="multipartform-data">multipart/form-data</h4>
<p>常见的 <code>post</code> 数据提交方式，上传文件必须设置 <code>enctype=&quot;multipart/form-data&quot;</code></p>
<pre><code>POST /foo HTTP/1.1
Content-Length: 68137
Content-Type: multipart/form-data; boundary=---------------------------974767299852498929531610575

---------------------------974767299852498929531610575
Content-Disposition: form-data; name=&quot;description&quot;

some text
---------------------------974767299852498929531610575
Content-Disposition: form-data; name=&quot;myFile&quot;; filename=&quot;foo.txt&quot;
Content-Type: text/plain

(content of the uploaded file foo.txt)
---------------------------974767299852498929531610575--
</code></pre>
<ol>
<li>首先生成 <code>boundary</code> 分割不同字段，避免与正文重复</li>
<li>消息主体按照字段分成多个部分，每个部分以 <code>--boundary</code> 开始，消息主体再以 <code>--boundary--</code> 结束</li>
</ol>
<h4 id="applicationjson">application/json</h4>
<p>消息主体是序列化的 <code>JSON</code> 字符串</p>
<h4 id="textxml">text/xml</h4>
<p>使用 <code>HTTP</code> 作为传输协议，<code>XML</code> 作为编码方式</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[深浅拷贝]]></title>
        <id>https://blog.ss1742.com/post/shen-qian-kao-bei</id>
        <link href="https://blog.ss1742.com/post/shen-qian-kao-bei">
        </link>
        <updated>2019-07-22T16:44:51.000Z</updated>
        <content type="html"><![CDATA[<p>深拷贝和浅拷贝是针对复杂数据类型来说的，浅拷贝只拷贝一层，而深拷贝是层层拷贝</p>
<h3 id="浅拷贝">浅拷贝</h3>
<p>浅拷贝是会将对象的每个属性进行依次复制，但是当对象的属性值是引用类型时，实质复制的是其引用，当引用指向的值改变时也会跟着变化</p>
<h3 id="深拷贝">深拷贝</h3>
<p>深拷贝复制变量值，对于非基本类型的变量，则递归至基本类型变量后，再复制。 深拷贝后的对象与原来的对象是完全隔离的，互不影响，对一个对象的修改并不会影响另一个对象</p>
<h4 id="实现">实现</h4>
<ol>
<li><code>JSON.parse(JSON.stringify(obj))</code></li>
</ol>
<ul>
<li>对象的属性值是函数时，无法拷贝。</li>
<li>原型链上的属性无法拷贝</li>
<li>不能正确的处理 <code>Date</code> 类型的数据</li>
<li>不能处理 <code>RegExp</code></li>
<li>会忽略 <code>symbol</code></li>
<li>会忽略 <code>undefined</code></li>
</ul>
<ol start="2">
<li>代码实现</li>
</ol>
<ul>
<li>如果是基本数据类型，直接返回</li>
<li>如果是 <code>RegExp</code> 或者 <code>Date</code> 类型，返回对应类型</li>
<li>如果是复杂数据类型，递归</li>
<li>考虑循环引用的问题</li>
</ul>
<pre><code>function copy(obj, hash = new WeakMap()) {
		if (obj instanceof RegExp) return new RegExp(obj);
		if (obj instanceof Date) return new Date(date);
		if (obj === null || typeof obj !== 'object') return obj;

		// 循环引用
		if (hash.has(obj)) {
			return hash.get(obj);
		}

		// 获取到 {} || []
		let t = new obj.constructor();
		hash.set(obj, t);
		
		// 遍历递归
		for (let key in obj) {
			if (obj.hasOwnProperty(key)) {
				t[key] = copy(obj[key], hash);
			}
		}
		
		return t;
	}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[a标签中 active hover link visited 设置顺序]]></title>
        <id>https://blog.ss1742.com/post/a-biao-qian-zhong-active-hover-link-visited-she-zhi-shun-xu</id>
        <link href="https://blog.ss1742.com/post/a-biao-qian-zhong-active-hover-link-visited-she-zhi-shun-xu">
        </link>
        <updated>2019-07-21T16:15:11.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>a:link<br>
a:visited<br>
a:hover<br>
a:active</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[禁止浏览器事件]]></title>
        <id>https://blog.ss1742.com/post/jin-zhi-liu-lan-qi-shi-jian</id>
        <link href="https://blog.ss1742.com/post/jin-zhi-liu-lan-qi-shi-jian">
        </link>
        <updated>2019-07-21T16:12:40.000Z</updated>
        <content type="html"><![CDATA[<h4 id="禁用事件冒泡">禁用事件冒泡</h4>
<blockquote>
<p>event.stopPropagation()</p>
</blockquote>
<h4 id="禁止默认事件">禁止默认事件</h4>
<blockquote>
<p>event.preventDefault()</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[jsonp 原理]]></title>
        <id>https://blog.ss1742.com/post/jsonp-yuan-li</id>
        <link href="https://blog.ss1742.com/post/jsonp-yuan-li">
        </link>
        <updated>2019-07-20T14:20:49.000Z</updated>
        <content type="html"><![CDATA[<p>尽管浏览器有同源策略，但是 <code>&lt;script&gt;</code> 标签的 <code>src</code> 属性不会被同源策略所约束，可以获取任意服务器上的脚本并执行。<code>jsonp</code> 通过插入 <code>script</code> 标签的方式来实现跨域，参数只能通过 <code>url</code> 传入，仅能支持 <code>get</code> 请求。</p>
<h4 id="原理">原理</h4>
<ul>
<li>创建 <code>callback</code> 方法</li>
<li>插入 <code>script</code> 标签</li>
<li>后台接受到请求，解析前端传过去的 <code>callback</code> 方法，返回该方法的调用，并且数据作为参数传入该方法</li>
<li>前端执行服务器返回的方法调用</li>
</ul>
<h4 id="实现">实现</h4>
<pre><code class="language-js">function jsonp({ url, params, callback }) {
	return new Promise((resolve, reject) =&gt; {
		let script = document.createElement('script');
		window[callback] = function(data) {
			resolve(data);
			document.body.removeChild(script);
		}
		params = { ...params, callback };
		let arrs = [];
		for (let key in params) {
			arrs.push(`${key}=${params[key]}`);
		}
		script.src = `${url}?${arrs.join('&amp;')}`;
		document.body.appendChild(script);
	})
}
</code></pre>
]]></content>
    </entry>
</feed>