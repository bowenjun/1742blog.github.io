<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.ss1742.com</id>
    <title>1742·小博文</title>
    <updated>2019-07-23T15:57:35.596Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.ss1742.com"/>
    <link rel="self" href="https://blog.ss1742.com/atom.xml"/>
    <subtitle>这是我的真博客</subtitle>
    <logo>https://blog.ss1742.com/images/avatar.png</logo>
    <icon>https://blog.ss1742.com/favicon.ico</icon>
    <rights>All rights reserved 2019, 1742·小博文</rights>
    <entry>
        <title type="html"><![CDATA[http content-type]]></title>
        <id>https://blog.ss1742.com/post/http-content-type</id>
        <link href="https://blog.ss1742.com/post/http-content-type">
        </link>
        <updated>2019-07-23T14:44:06.000Z</updated>
        <content type="html"><![CDATA[<p><code>content-type</code> 是 <code>http</code> 实体首部字段，用来说明请求或返回的消息主体是用何种方式编码，在 <code>request header</code> 和 <code>response header</code> 中都存在</p>
<h3 id="类型">类型</h3>
<h4 id="applicationx-www-form-urlencoded">application/x-www-form-urlencoded</h4>
<p>浏览器原生 <code>form</code> 表单<br>
提交数据按照 key1=val1&amp;key2=val2的方式进行编码，<code>key</code> 和 <code>value</code> 都进行了 <code>url</code> 转码</p>
<pre><code>POST [http://www.example.com](http://www.example.com) HTTP/1.1 
Content-Type: application/x-[www-form-urlencoded](http://www-form-urlencoded);charset=utf-8 

title=test&amp;sub%5B%5D=1&amp;sub%5B%5D=2&amp;sub%5B%5D=3 
</code></pre>
<h4 id="multipartform-data">multipart/form-data</h4>
<p>常见的 <code>post</code> 数据提交方式，上传文件必须设置 <code>enctype=&quot;multipart/form-data&quot;</code></p>
<pre><code>POST /foo HTTP/1.1
Content-Length: 68137
Content-Type: multipart/form-data; boundary=---------------------------974767299852498929531610575

---------------------------974767299852498929531610575
Content-Disposition: form-data; name=&quot;description&quot;

some text
---------------------------974767299852498929531610575
Content-Disposition: form-data; name=&quot;myFile&quot;; filename=&quot;foo.txt&quot;
Content-Type: text/plain

(content of the uploaded file foo.txt)
---------------------------974767299852498929531610575--
</code></pre>
<ol>
<li>首先生成 <code>boundary</code> 分割不同字段，避免与正文重复</li>
<li>消息主体按照字段分成多个部分，每个部分以 <code>--boundary</code> 开始，消息主体再以 <code>--boundary--</code> 结束</li>
</ol>
<h4 id="applicationjson">application/json</h4>
<p>消息主体是序列化的 <code>JSON</code> 字符串</p>
<h4 id="textxml">text/xml</h4>
<p>使用 <code>HTTP</code> 作为传输协议，<code>XML</code> 作为编码方式</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[深浅拷贝]]></title>
        <id>https://blog.ss1742.com/post/shen-qian-kao-bei</id>
        <link href="https://blog.ss1742.com/post/shen-qian-kao-bei">
        </link>
        <updated>2019-07-22T16:44:51.000Z</updated>
        <content type="html"><![CDATA[<p>深拷贝和浅拷贝是针对复杂数据类型来说的，浅拷贝只拷贝一层，而深拷贝是层层拷贝</p>
<h3 id="浅拷贝">浅拷贝</h3>
<p>浅拷贝是会将对象的每个属性进行依次复制，但是当对象的属性值是引用类型时，实质复制的是其引用，当引用指向的值改变时也会跟着变化</p>
<h3 id="深拷贝">深拷贝</h3>
<p>深拷贝复制变量值，对于非基本类型的变量，则递归至基本类型变量后，再复制。 深拷贝后的对象与原来的对象是完全隔离的，互不影响，对一个对象的修改并不会影响另一个对象</p>
<h4 id="实现">实现</h4>
<ol>
<li><code>JSON.parse(JSON.stringify(obj))</code></li>
</ol>
<ul>
<li>对象的属性值是函数时，无法拷贝。</li>
<li>原型链上的属性无法拷贝</li>
<li>不能正确的处理 <code>Date</code> 类型的数据</li>
<li>不能处理 <code>RegExp</code></li>
<li>会忽略 <code>symbol</code></li>
<li>会忽略 <code>undefined</code></li>
</ul>
<ol start="2">
<li>代码实现</li>
</ol>
<ul>
<li>如果是基本数据类型，直接返回</li>
<li>如果是 <code>RegExp</code> 或者 <code>Date</code> 类型，返回对应类型</li>
<li>如果是复杂数据类型，递归</li>
<li>考虑循环引用的问题</li>
</ul>
<pre><code>function copy(obj, hash = new WeakMap()) {
		if (obj instanceof RegExp) return new RegExp(obj);
		if (obj instanceof Date) return new Date(date);
		if (obj === null || typeof obj !== 'object') return obj;

		// 循环引用
		if (hash.has(obj)) {
			return hash.get(obj);
		}

		// 获取到 {} || []
		let t = new obj.constructor();
		hash.set(obj, t);
		
		// 遍历递归
		for (let key in obj) {
			if (obj.hasOwnProperty(key)) {
				t[key] = copy(obj[key], hash);
			}
		}
		
		return t;
	}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[a标签中 active hover link visited 设置顺序]]></title>
        <id>https://blog.ss1742.com/post/a-biao-qian-zhong-active-hover-link-visited-she-zhi-shun-xu</id>
        <link href="https://blog.ss1742.com/post/a-biao-qian-zhong-active-hover-link-visited-she-zhi-shun-xu">
        </link>
        <updated>2019-07-21T16:15:11.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>a:link<br>
a:visited<br>
a:hover<br>
a:active</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[禁止浏览器事件]]></title>
        <id>https://blog.ss1742.com/post/jin-zhi-liu-lan-qi-shi-jian</id>
        <link href="https://blog.ss1742.com/post/jin-zhi-liu-lan-qi-shi-jian">
        </link>
        <updated>2019-07-21T16:12:40.000Z</updated>
        <content type="html"><![CDATA[<h4 id="禁用事件冒泡">禁用事件冒泡</h4>
<blockquote>
<p>event.stopPropagation()</p>
</blockquote>
<h4 id="禁止默认事件">禁止默认事件</h4>
<blockquote>
<p>event.preventDefault()</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[jsonp 原理]]></title>
        <id>https://blog.ss1742.com/post/jsonp-yuan-li</id>
        <link href="https://blog.ss1742.com/post/jsonp-yuan-li">
        </link>
        <updated>2019-07-20T14:20:49.000Z</updated>
        <content type="html"><![CDATA[<p>尽管浏览器有同源策略，但是 <code>&lt;script&gt;</code> 标签的 <code>src</code> 属性不会被同源策略所约束，可以获取任意服务器上的脚本并执行。<code>jsonp</code> 通过插入 <code>script</code> 标签的方式来实现跨域，参数只能通过 <code>url</code> 传入，仅能支持 <code>get</code> 请求。</p>
<h4 id="原理">原理</h4>
<ul>
<li>创建 <code>callback</code> 方法</li>
<li>插入 <code>script</code> 标签</li>
<li>后台接受到请求，解析前端传过去的 <code>callback</code> 方法，返回该方法的调用，并且数据作为参数传入该方法</li>
<li>前端执行服务器返回的方法调用</li>
</ul>
<h4 id="实现">实现</h4>
<pre><code class="language-js">function jsonp({ url, params, callback }) {
	return new Promise((resolve, reject) =&gt; {
		let script = document.createElement('script');
		window[callback] = function(data) {
			resolve(data);
			document.body.removeChild(script);
		}
		params = { ...params, callback };
		let arrs = [];
		for (let key in params) {
			arrs.push(`${key}=${params[key]}`);
		}
		script.src = `${url}?${arrs.join('&amp;')}`;
		document.body.appendChild(script);
	})
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[this 指向]]></title>
        <id>https://blog.ss1742.com/post/this-zhi-xiang</id>
        <link href="https://blog.ss1742.com/post/this-zhi-xiang">
        </link>
        <updated>2019-07-20T14:11:11.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>
<p><code>this</code>，谁调用指谁</p>
</li>
<li>
<p>构造函数的优先级(访问权限) &gt; 原型链</p>
</li>
<li>
<p><code>new</code> 的时候，<code>this</code> 就会指向 <code>new</code> 出来的对象</p>
</li>
<li>
<p>箭头函数</p>
</li>
</ul>
<ol>
<li>箭头函数相当于 <code>bind，会改变</code>this` 的指向</li>
<li>箭头函数的 <code>this</code> 是他父级的 <code>this</code></li>
<li>箭头函数把 <code>this</code> 固定到他父级的同级作用</li>
</ol>
<h4 id="能改变-this-指向的关键词">能改变 <code>this</code> 指向的关键词</h4>
<ul>
<li>
<p>bind</p>
</li>
<li>
<p>apply</p>
</li>
<li>
<p>call</p>
</li>
<li>
<p>一般函数 <code>this</code> 指向在执行的时候绑定</p>
</li>
<li>
<p>箭头函数中的 <code>this</code> 是在定义函数的时候绑定</p>
</li>
<li>
<p>严格模式</p>
</li>
</ul>
<ol>
<li>非严格模式下默认指向 <code>window</code></li>
<li>严格模式下传 <code>null</code> 指向 <code>null</code>，不传或者传 <code>undefined</code> 都指向 <code>undefined</code>，即在严格模式下，没有写执行主体，<code>this</code> 指向是 <code>undefined</code></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git rebase 和 git merge 的区别]]></title>
        <id>https://blog.ss1742.com/post/git-rebase-he-git-merge-de-qu-bie</id>
        <link href="https://blog.ss1742.com/post/git-rebase-he-git-merge-de-qu-bie">
        </link>
        <updated>2019-07-19T15:26:10.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p><code>git rebase</code> 和 <code>git merge</code> 一样都是用于从一个分支获取并且合并到当前分支</p>
</blockquote>
<h3 id="git-merge">git merge</h3>
<ul>
<li>将分支切换到 <code>master</code> 上去：<code>git checkout master</code></li>
<li>将分支 <code>feature</code> 合并到当前分支（即 <code>master</code> 分支）上：<code>git merge feature</code></li>
</ul>
<p>特点</p>
<ul>
<li>只处理一次冲突</li>
<li>引入了一次合并的历史记录，合并后的所有 <code>commit</code> 会按照提交时间从旧到新排列</li>
<li>所有的过程信息更多，可能会提高之后查找问题的难度</li>
</ul>
<h3 id="git-rebase">git rebase</h3>
<ul>
<li>改变当前分支从 <code>master</code> 上拉出分支的位置</li>
<li>没有多余的合并历史的记录，且合并后的 <code>commit</code> 顺序不一定按照 <code>commit</code> 的提交时间排列</li>
<li>可能会多次解决同一个地方的冲突（有 <code>squash</code> 来解决）</li>
<li>更清爽一些，<code>master</code> 分支上每个 <code>commit</code> 点都是相对独立完整的功能单元</li>
</ul>
<h3 id="总结">总结</h3>
<p>当需要保留详细的合并信息的时候建议使用 <code>git merge</code>，特别是需要将分支合并进入 <code>master</code> 分支时；当发现自己修改某个功能时，频繁进行了 <code>git commit</code> 提交时，发现其实过多的提交信息没有必要时，可以尝试 <code>git rebase</code>。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git 提交 types]]></title>
        <id>https://blog.ss1742.com/post/git-ti-jiao-types</id>
        <link href="https://blog.ss1742.com/post/git-ti-jiao-types">
        </link>
        <updated>2019-07-19T15:23:13.000Z</updated>
        <content type="html"><![CDATA[<pre><code>feat: 新功能(feature)
fix: 修补(bug)
docs: 文档(documentation)
style: 格式(不影响代码运行的变动)
refactor: 重构(即不是新增功能，也不是修改bug的代码变动)
test: 增加测试
chore: 构建过程或辅助工具的变动
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[《深入浅出 React 和 Redux》[2]]]></title>
        <id>https://blog.ss1742.com/post/lesslessshen-ru-qian-chu-react-he-reduxgreatergreater-2</id>
        <link href="https://blog.ss1742.com/post/lesslessshen-ru-qian-chu-react-he-reduxgreatergreater-2">
        </link>
        <updated>2019-07-18T15:56:45.000Z</updated>
        <content type="html"><![CDATA[<h2 id="第2章-react-组件">第2章 React 组件</h2>
<h3 id="易于维护的设计要素">易于维护的设计要素</h3>
<blockquote>
<p>高内聚 把逻辑紧密相关的内容放在一个组件内<br>
低耦合 每个组件尽量独立，依赖关系尽量弱化</p>
</blockquote>
<h3 id="组件的数据">组件的数据</h3>
<p>对外用 <code>props</code>，对内用 <code>state</code></p>
<h4 id="proptypes-检查">propTypes 检查</h4>
<pre><code class="language-js">Person.propTypes = {
    name: PropTypes.string.isRequired,
    age: PropTypes.number
}

// 添加默认
Person.defaultProps = {
    name: ''
}
</code></pre>
<p>因为检查会消耗 <code>CPU</code> 资源，所以可以在开发的时候加上来避免一些错误，在发布的时候可以通过 <code>babel-react-optimize</code> 来去掉</p>
<h3 id="生命周期">生命周期</h3>
<p>本书中 <code>react</code> 版本 <code>v15.4</code> 太老，<code>v16.+</code> 部分生命周期方法废除，这一块后面总结</p>
<h4 id="constructor">constructor</h4>
<ol>
<li>初始化 <code>state</code></li>
<li>绑定成员函数的 <code>this</code> 环境</li>
</ol>
<p>tips</p>
<blockquote>
<p>this.foo = ::this.foo &lt;==&gt; this.foo = this.foo.bind(this)</p>
</blockquote>
<p>...</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[《深入浅出 React 和 Redux》[1]]]></title>
        <id>https://blog.ss1742.com/post/lesslessshen-ru-qian-chu-react-he-reduxgreatergreater-1</id>
        <link href="https://blog.ss1742.com/post/lesslessshen-ru-qian-chu-react-he-reduxgreatergreater-1">
        </link>
        <updated>2019-07-18T15:40:30.000Z</updated>
        <content type="html"><![CDATA[<h2 id="第1章">第1章</h2>
<h3 id="简介">简介</h3>
<ul>
<li><code>react</code> 不支持比 <code>IE8</code> 更低版本浏览器</li>
<li>通过组件（独立可重用的代码）开发应用。基于组件的应用开发是广泛使用的软件开发模式，用 <code>分而治之</code> 的方法，把一个大的应用分解成若干小的组件，每个组件只关注于某个小范围的特定功能</li>
</ul>
<h3 id="jsx">JSX</h3>
<ul>
<li><code>JSX</code>，是 <code>JavaScript</code>的语法扩展，让我们在 <code>JavaScript</code> 中可以编写像 <code>HTML</code> 一样的代码</li>
</ul>
<h4 id="进步还是倒退问题">进步还是倒退问题</h4>
<blockquote>
<p><code>JSX</code> 中的 <code>onClick</code> 和 <code>HTML</code> 中的 <code>onclick</code> 对比</p>
</blockquote>
<ul>
<li>
<p><code>HTML</code> 中的 <code>onclick</code></p>
<ol>
<li>处理函数是在全局环境下执行的，这污染全局环境，很容易产生意料不到的效果</li>
<li>给很多 <code>DOM</code> 添加 <code>onclick</code> 事件，可能会影响网页的性能，需要处理的事件函数越多，性能就越低</li>
<li>使用 <code>onclick</code> 的 <code>DOM</code>，如果要动态删掉，需要把对应的时间处理器注销，否则可能造成内存写漏并且不容易追踪到 <code>bug</code></li>
</ol>
</li>
<li>
<p><code>JSX</code></p>
<ol>
<li><code>JSX</code> 组件的 <code>onClick</code>，并没有直接使用 <code>onclick</code> 的 <code>html</code>，而是使用事件委托处理点击事件，最后都只在 <code>DOM</code> 树上添加了一个事件处理函数，挂在最顶层的 <code>DOM</code> 节点上</li>
<li><code>react</code> 中组件的生命周期，在 <code>unmount</code> 的时候自然能够清理所有相关的事件处理函数，内存泄露的问题得以解决</li>
</ol>
</li>
</ul>
<h3 id="eject">eject</h3>
<blockquote>
<p>npm run eject</p>
</blockquote>
<p>&quot;弹射&quot;（暴露并修改）<code>webpack</code>、<code>package.json</code> 等配置</p>
<h3 id="react-的工作方式">react 的工作方式</h3>
<p><code>react</code> 的理念</p>
<p><code>UI = render(data)</code></p>
<h3 id="virtual-dom">Virtual DOM</h3>
<p><code>DOM</code> 是结构化文本的抽象表达形式，特定于 <code>Web</code> 环境中</p>
<p><code>Virtual DOM</code> 是对 <code>DOM</code> 树的抽象，只是存在于 <code>JavaScript</code> 空间的树形结构</p>
<h3 id="tips">Tips</h3>
<p>设计原则：做同一件事的代码应该有高耦合性。<br>
纯函数：没有任何副作用，输出完全依赖输入的函数。</p>
]]></content>
    </entry>
</feed>