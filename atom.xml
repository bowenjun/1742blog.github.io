<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.ss1742.com</id>
    <title>博客屋</title>
    <updated>2020-07-07T14:27:51.739Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.ss1742.com"/>
    <link rel="self" href="https://blog.ss1742.com/atom.xml"/>
    <subtitle>欢迎来到小博文的博客屋</subtitle>
    <logo>https://blog.ss1742.com/images/avatar.png</logo>
    <icon>https://blog.ss1742.com/favicon.ico</icon>
    <rights>All rights reserved 2020, 博客屋</rights>
    <entry>
        <title type="html"><![CDATA[【网络、优化与浏览器】浏览器缓存]]></title>
        <id>https://blog.ss1742.com/post/wang-luo-you-hua-yu-liu-lan-qi-liu-lan-qi-huan-cun/</id>
        <link href="https://blog.ss1742.com/post/wang-luo-you-hua-yu-liu-lan-qi-liu-lan-qi-huan-cun/">
        </link>
        <updated>2020-07-07T14:16:12.000Z</updated>
        <content type="html"><![CDATA[<h2 id="广义的缓存">广义的缓存</h2>
<ul>
<li>http cache</li>
<li>service worker cache</li>
<li>memory cache</li>
<li>push cache</li>
</ul>
<h2 id="http-cache">http cache</h2>
<blockquote>
<p><code>Expires</code> 和 <code>Cache-Control</code> 两个 <code>header</code> 来控制抢缓存</p>
</blockquote>
<pre><code> expires: Wed, 11 Mar 2019 16:12:18 GMT 
 cache-control: max-age=31536000 // 1.1 精准 优先级高
</code></pre>
<p>如果强缓存失效了，需要执行协商缓存</p>
<pre><code>If-Modified-Since: Fri, 27 Oct 2017 06:35:57 GMT

ETag: W/&quot;2aaa-129892f459&quot;
If-None-Match: W/&quot;2aaa-129892f459&quot;
</code></pre>
<h2 id="memory-cache">memory cache</h2>
<p>内存缓存，短命。比如常用数据存 <code>js</code> 里，浏览器也有自己的策略，<code>base64</code> 图片，体积小的静态资源</p>
<h2 id="service-worker-cache">service worker cache</h2>
<p><code>service worker</code> 是一种独立于主线程之外的 <code>js</code> 线程。它脱离于浏览器窗体，算是幕后工作，可以实现离线缓存，网络代理等</p>
<pre><code>window.navigator.serviceWorker
    .register('/kaikeba.js')
    .then(
        function () {
            console.log('注册成功')
        }
    ).catch(err =&gt; {
        console.error(&quot;注册失败&quot;) 
    });
</code></pre>
<h2 id="push-cache">push cache</h2>
<p><code>http2</code> 的缓存</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【设计模式三】代码重构]]></title>
        <id>https://blog.ss1742.com/post/she-ji-mo-shi-dai-ma-chong-gou/</id>
        <link href="https://blog.ss1742.com/post/she-ji-mo-shi-dai-ma-chong-gou/">
        </link>
        <updated>2020-02-17T11:03:28.000Z</updated>
        <content type="html"><![CDATA[<h2 id="提炼函数">提炼函数</h2>
<h2 id="合并重复的条件片段">合并重复的条件片段</h2>
<h2 id="把条件分支语句提炼成函数">把条件分支语句提炼成函数</h2>
<h2 id="合理使用循环">合理使用循环</h2>
<h2 id="提前让函数退出代替嵌套条件分支">提前让函数退出代替嵌套条件分支</h2>
<h2 id="传递对象参数代替过长的参数列表">传递对象参数代替过长的参数列表</h2>
<h2 id="尽量减少参数数量">尽量减少参数数量</h2>
<h2 id="少用三目运算符">少用三目运算符</h2>
<h2 id="合理使用链式调用">合理使用链式调用</h2>
<h2 id="分解大型类">分解大型类</h2>
<h2 id="用-return-退出多重循环">用 return 退出多重循环</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【设计模式三】接口和面向接口编程]]></title>
        <id>https://blog.ss1742.com/post/she-ji-mo-shi-jie-kou-he-mian-xiang-jie-kou-bian-cheng/</id>
        <link href="https://blog.ss1742.com/post/she-ji-mo-shi-jie-kou-he-mian-xiang-jie-kou-bian-cheng/">
        </link>
        <updated>2020-02-17T11:02:10.000Z</updated>
        <content type="html"><![CDATA[<h2 id="回到-java-的抽象类">回到 Java 的抽象类</h2>
<h2 id="interface">interface</h2>
<h2 id="javascript-语言是否需要抽象类和-insterface">JavaScript 语言是否需要抽象类和 insterface</h2>
<h2 id="用鸭子类型进行接口检查">用鸭子类型进行接口检查</h2>
<h2 id="用-typescript-编写基于-interface-的命令模式">用 Typescript 编写基于 interface 的命令模式</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【设计模式三】开放——封闭原则]]></title>
        <id>https://blog.ss1742.com/post/she-ji-mo-shi-kai-fang-feng-bi-yuan-ze/</id>
        <link href="https://blog.ss1742.com/post/she-ji-mo-shi-kai-fang-feng-bi-yuan-ze/">
        </link>
        <updated>2020-02-17T11:01:04.000Z</updated>
        <content type="html"><![CDATA[<h2 id="扩展-windowonload-函数">扩展 window.onload 函数</h2>
<h2 id="开放和封闭">开放和封闭</h2>
<h2 id="用对象的多态性消除条件分支">用对象的多态性消除条件分支</h2>
<h2 id="找出变化的地方">找出变化的地方</h2>
<h2 id="设计模式中的开放封闭原则">设计模式中的开放——封闭原则</h2>
<h2 id="开放封闭原则的相对性">开放——封闭原则的相对性</h2>
<h2 id="接受第一次愚弄">接受第一次愚弄</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【设计模式三】最少只是原则]]></title>
        <id>https://blog.ss1742.com/post/she-ji-mo-shi-zui-shao-zhi-shi-yuan-ze/</id>
        <link href="https://blog.ss1742.com/post/she-ji-mo-shi-zui-shao-zhi-shi-yuan-ze/">
        </link>
        <updated>2020-02-17T11:00:16.000Z</updated>
        <content type="html"><![CDATA[<h2 id="减少对象之间的联系">减少对象之间的联系</h2>
<h2 id="设计模式中的-lkp-原则">设计模式中的 LKP 原则</h2>
<h2 id="封装在-lkp-原则中的体现">封装在 LKP 原则中的体现</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【设计模式三】单一职责原则]]></title>
        <id>https://blog.ss1742.com/post/she-ji-mo-shi-dan-yi-zhi-ze-yuan-ze/</id>
        <link href="https://blog.ss1742.com/post/she-ji-mo-shi-dan-yi-zhi-ze-yuan-ze/">
        </link>
        <updated>2020-02-17T10:59:20.000Z</updated>
        <content type="html"><![CDATA[<h2 id="设计模式中的-srp-原则">设计模式中的 SRP 原则</h2>
<h2 id="何时应该分离职责">何时应该分离职责</h2>
<h2 id="违反-srp-原则">违反 SRP 原则</h2>
<h2 id="srp-原则的优缺点">SRP 原则的优缺点</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【设计模式二】状态模式]]></title>
        <id>https://blog.ss1742.com/post/she-ji-mo-shi-zhuang-tai-mo-shi/</id>
        <link href="https://blog.ss1742.com/post/she-ji-mo-shi-zhuang-tai-mo-shi/">
        </link>
        <updated>2020-02-17T09:40:00.000Z</updated>
        <content type="html"><![CDATA[<h2 id="初识状态模式">初识状态模式</h2>
<h2 id="状态模式的定义">状态模式的定义</h2>
<h2 id="状态模式的通用结构">状态模式的通用结构</h2>
<h2 id="缺少抽象类的变通方式">缺少抽象类的变通方式</h2>
<h2 id="另一个状态模式示例文件上传">另一个状态模式示例——文件上传</h2>
<h2 id="状态模式的优缺点">状态模式的优缺点</h2>
<h2 id="状态模式中的性能优化点">状态模式中的性能优化点</h2>
<h2 id="状态模式和策略模式的关系">状态模式和策略模式的关系</h2>
<h2 id="javascript-版本的状态机">JavaScript 版本的状态机</h2>
<h2 id="表驱动的有限状态机">表驱动的有限状态机</h2>
<h2 id="实际项目中的其他状态机">实际项目中的其他状态机</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【设计模式二】装饰者模式]]></title>
        <id>https://blog.ss1742.com/post/she-ji-mo-shi-zhuang-shi-zhe-mo-shi/</id>
        <link href="https://blog.ss1742.com/post/she-ji-mo-shi-zhuang-shi-zhe-mo-shi/">
        </link>
        <updated>2020-02-17T09:38:47.000Z</updated>
        <content type="html"><![CDATA[<h2 id="模拟传统面向对象语言的装饰者模式">模拟传统面向对象语言的装饰者模式</h2>
<h2 id="装饰者也是包装器">装饰者也是包装器</h2>
<h2 id="回到-javascript-的装饰者">回到 JavaScript 的装饰者</h2>
<h2 id="装饰函数">装饰函数</h2>
<h2 id="用-aop-装饰函数">用 AOP 装饰函数</h2>
<h2 id="aop-的应用实例">AOP 的应用实例</h2>
<h2 id="装饰者模式和代理模式">装饰者模式和代理模式</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【设计模式二】中介者模式]]></title>
        <id>https://blog.ss1742.com/post/she-ji-mo-shi-zhong-jie-zhe-mo-shi/</id>
        <link href="https://blog.ss1742.com/post/she-ji-mo-shi-zhong-jie-zhe-mo-shi/">
        </link>
        <updated>2020-02-17T09:23:24.000Z</updated>
        <content type="html"><![CDATA[<h2 id="现实中的中介者">现实中的中介者</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【设计模式二】职责链模式]]></title>
        <id>https://blog.ss1742.com/post/she-ji-mo-shi-zhi-ze-lian-mo-shi/</id>
        <link href="https://blog.ss1742.com/post/she-ji-mo-shi-zhi-ze-lian-mo-shi/">
        </link>
        <updated>2020-02-17T09:21:46.000Z</updated>
        <content type="html"><![CDATA[<h2 id="现实中的职责链模式">现实中的职责链模式</h2>
<h2 id="实际开发中的职责链模式">实际开发中的职责链模式</h2>
<h2 id="用职责链模式重构代码">用职责链模式重构代码</h2>
<h2 id="灵活可拆分的职责链节点">灵活可拆分的职责链节点</h2>
<h2 id="异步的职责链">异步的职责链</h2>
<h2 id="职责链模式的优缺点">职责链模式的优缺点</h2>
<h2 id="用-aop-实现的职责链">用 AOP 实现的职责链</h2>
<h2 id="用职责链模式获取文件上传对象">用职责链模式获取文件上传对象</h2>
]]></content>
    </entry>
</feed>