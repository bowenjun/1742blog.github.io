<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.ss1742.com</id>
    <title>1742·小博文</title>
    <updated>2019-07-31T16:15:18.998Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.ss1742.com"/>
    <link rel="self" href="https://blog.ss1742.com/atom.xml"/>
    <subtitle>这是我的真博客</subtitle>
    <logo>https://blog.ss1742.com/images/avatar.png</logo>
    <icon>https://blog.ss1742.com/favicon.ico</icon>
    <rights>All rights reserved 2019, 1742·小博文</rights>
    <entry>
        <title type="html"><![CDATA[读书有感——level-0.0.1]]></title>
        <id>https://blog.ss1742.com/post/du-shu-you-gan-level-001</id>
        <link href="https://blog.ss1742.com/post/du-shu-you-gan-level-001">
        </link>
        <updated>2019-07-31T16:11:58.000Z</updated>
        <content type="html"><![CDATA[<p>利用晚上11点以后的时间，正在看《曾国藩的正面与侧面》—— 张宏杰，开始坚持记账(来自曾国藩老师)</p>
<p>利用地铁，2天已读《邓小平传》—— 理查德伊文思 前七章</p>
<p>实践来了，什么书都读。其实是才开始阅读，并不是说马上就变成了和两位伟人一样有同样的思想报复和才干，写出来的句子也就只有这可怜巴巴的两句。但是我觉得坚持完8月，可能有意想不到的收获。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[复原IP地址]]></title>
        <id>https://blog.ss1742.com/post/fu-yuan-ip-di-zhi</id>
        <link href="https://blog.ss1742.com/post/fu-yuan-ip-di-zhi">
        </link>
        <updated>2019-07-31T16:00:24.000Z</updated>
        <content type="html"><![CDATA[<p>给定一个只包含数字的字符串，复原它并返回所有可能的 IP 地址格式。</p>
<p>示例:</p>
<pre><code>输入: &quot;25525511135&quot;
输出: [&quot;255.255.11.135&quot;, &quot;255.255.111.35&quot;]
</code></pre>
<pre><code class="language-js">var restoreIpAddresses = function(s) {
    let fun = getObj();
    fun.findOut(s, []);
    return fun.res;
};

var getObj = function() {
    let res = [];
    function findOut(str, arr) {
        if (!str.length &amp;&amp; arr.length === 4) return res.push(arr.join('.'));
        if (arr.length === 4) return;
        let temp = '', tempArr = str.split('');
        for (let i = 0; i &lt; 3; i++) {
            temp = tempArr.pop() + temp;
            if (isValid(temp)) {
                let a = [...arr];
                a.unshift(temp);
                findOut(tempArr.join(''), a);
            }
        }
    }
    return {
        findOut,
        res
    }
}

var isValid = function(s) {
    return Number(s) &lt; 256 &amp;&amp; Number(s).toString() === s;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[axios上传进度]]></title>
        <id>https://blog.ss1742.com/post/axios-shang-chuan-jin-du</id>
        <link href="https://blog.ss1742.com/post/axios-shang-chuan-jin-du">
        </link>
        <updated>2019-07-30T16:11:28.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-js">const config = {
    onUploadProgress: progressEvent =&gt; console.log(progressEvent.loaded / progressEvent.total)
}
axios.put('/upload/server', data, config);
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[前端性能优化]]></title>
        <id>https://blog.ss1742.com/post/qian-duan-xing-neng-you-hua</id>
        <link href="https://blog.ss1742.com/post/qian-duan-xing-neng-you-hua">
        </link>
        <updated>2019-07-30T09:36:36.000Z</updated>
        <content type="html"><![CDATA[<p>前端性能优化：减少请求数量、减小资源大小、优化网络连接、优化资源加载、减少重绘回流、使用更好性能的api和构建优化。</p>
<p>参考链接: <a href="https://www.cnblogs.com/xiaohuochai/p/9178390.html#anchor1">前端性能优化的七大手段</a></p>
<h3 id="减少请求数量">减少请求数量</h3>
<h4 id="合并">合并</h4>
<p>如果不合并影响</p>
<ul>
<li>文件之间插入的上行请求，增加了 n - 1 个网络延迟</li>
<li>受丢包问题影响更严重</li>
<li>经过代理服务器时可能会被断开</li>
</ul>
<p>合并带来的问题</p>
<ul>
<li>首屏渲染</li>
<li>缓存失效</li>
</ul>
<p>建议</p>
<ul>
<li>公共库合并</li>
<li>不同页面单独合并</li>
</ul>
<h4 id="图片处理">图片处理</h4>
<ol>
<li>雪碧图<br>
减少了请求数量，但如果图片过大一次加载过慢。现在因字体图片和 svg 图片流行渐渐使用少了<br>
2. base64<br>
base64 格式嵌入到 html 中，减少了请求数量，但是编码用8位字符表示信息中的6个位，编码后大小比原始值扩大了 33%<br>
3. 使用字体图标来替代图片</li>
</ol>
<h4 id="减少重定向">减少重定向</h4>
<p>如果使用重定向，要使用 301 永久重定向</p>
<h4 id="使用缓存">使用缓存</h4>
<p>Cache-Control 和 Expires</p>
<h4 id="不使用-import">不使用 @import</h4>
<h4 id="避免使用空-src-和-href">避免使用空 src 和 href</h4>
<h3 id="减小资源大小">减小资源大小</h3>
<h4 id="压缩">压缩</h4>
<ul>
<li>html 压缩</li>
<li>css 压缩</li>
<li>js 压缩与混淆</li>
<li>图片压缩（tinypng）</li>
</ul>
<h4 id="gzip">gzip</h4>
<h3 id="优化网络连接">优化网络连接</h3>
<h4 id="cdncontent-delivery-network">cdn(Content Delivery Network)</h4>
<h4 id="dns-预解析">dns 预解析</h4>
<pre><code class="language-html">&lt;link rel=&quot;dns-prefecth&quot; href=&quot;https://xxx.com&quot; /&gt;
</code></pre>
<h4 id="并行连接">并行连接</h4>
<p>域名发散，使用多个域名增加并发数</p>
<h4 id="持久连接">持久连接</h4>
<p>keep-alive</p>
<h4 id="管道化连接">管道化连接</h4>
<p>http2协议，单条连接多路复用</p>
<h3 id="优化资源下载">优化资源下载</h3>
<h4 id="资源加载位置">资源加载位置</h4>
<p>css 头部，js 尾部，布局 js 放在 head 中</p>
<h4 id="资源加载时机">资源加载时机</h4>
<ol>
<li>异步 script 标签<br>
defer: html 加载完后执行<br>
async: 下载完成立即执行<br>
2. 模块按需加载<br>
webpack 1. import() 2.require.ensure<br>
3. 懒加载</li>
</ol>
<h3 id="减少重绘回流">减少重绘回流</h3>
<h4 id="样式">样式</h4>
<ol>
<li>避免使用层级较深的选择器</li>
<li>避免使用 css 表达式</li>
<li>避免使用 table 布局</li>
<li>能用 css 尽量不要用 js</li>
</ol>
<h4 id="渲染层">渲染层</h4>
<ol>
<li>将需要多次重绘的元素独立，如设置 absolute，可以减少重绘范围</li>
<li>动画使用硬件渲染</li>
</ol>
<h4 id="dom-优化">dom 优化</h4>
<ol>
<li>缓存 dom</li>
<li>减少 dom 深度和数量</li>
<li>批量操作 dom</li>
<li>
<ul>
<li>事件代理</li>
</ul>
</li>
<li>
<ul>
<li>防抖节流</li>
</ul>
</li>
<li>及时清理环境</li>
</ol>
<h3 id="使用更好的api">使用更好的api</h3>
<h4 id="用对-css-选择器">用对 css 选择器</h4>
<h4 id="使用-requestanimationframe-替代计时器">使用 requestAnimationFrame 替代计时器</h4>
<h4 id="使用-intersectionobserver-实现图片可视区域懒加载">使用 IntersectionObserver 实现图片可视区域懒加载</h4>
<h4 id="使用-webworker">使用 webworker</h4>
<h3 id="构建优化">构建优化</h3>
<p>webpack</p>
<h4 id="打包公共代码">打包公共代码</h4>
<h4 id="动态导入-按需加载">动态导入 按需加载</h4>
<h4 id="剔除无用代码">剔除无用代码</h4>
<p>tree shaking</p>
<p>js - uglifyjs</p>
<p>css - purify css</p>
<h4 id="长缓存优化">长缓存优化</h4>
<ol>
<li>
<p>hash 替换为 chunkhash</p>
</li>
<li>
<p>使用 name 而不是 id</p>
</li>
</ol>
<h4 id="公用代码内联">公用代码内联</h4>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[买卖股票的最佳时机 II]]></title>
        <id>https://blog.ss1742.com/post/mai-mai-gu-piao-de-zui-jia-shi-ji-ii</id>
        <link href="https://blog.ss1742.com/post/mai-mai-gu-piao-de-zui-jia-shi-ji-ii">
        </link>
        <updated>2019-07-29T15:05:28.000Z</updated>
        <content type="html"><![CDATA[<p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p>
<p>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</p>
<p>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>
<p>示例 1:</p>
<pre><code>输入: [7,1,5,3,6,4]
输出: 7
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。
</code></pre>
<p>示例 2:</p>
<pre><code>输入: [1,2,3,4,5]
输出: 4
解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
</code></pre>
<p>示例 3:</p>
<pre><code>输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
</code></pre>
<pre><code class="language-js">function maxProfit(prices) {
	let buy = Number.MAX_SAFE_INTEGER;
	let profit = 0;
	for (let i = 0, len = prices.length; i &lt; len; i++) {
		if (prices[i] &lt; buy) {
			buy = prices[i];
		} else {
			profit += prices[i] - buy;
			buy = prices[i];
		}
	}
	return profit;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[买卖股票的最佳时机]]></title>
        <id>https://blog.ss1742.com/post/mai-mai-gu-piao-de-zui-jia-shi-ji</id>
        <link href="https://blog.ss1742.com/post/mai-mai-gu-piao-de-zui-jia-shi-ji">
        </link>
        <updated>2019-07-29T15:00:21.000Z</updated>
        <content type="html"><![CDATA[<p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p>
<p>如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。</p>
<p>注意你不能在买入股票前卖出股票。</p>
<p>示例 1:</p>
<pre><code>输入: [7,1,5,3,6,4]
输出: 5
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。
</code></pre>
<p>示例 2:</p>
<pre><code>输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
</code></pre>
<pre><code class="language-js">function maxProfit(prices) {
	let min = Number.MAX_SAFE_INTEGET;
	let profit = 0;
	for (let i = 0, len = prices.length; i &lt; len; i++) {
		if (prices[i] &lt; min) {
			min = prices[i];
		} else if (prices[i] - min &gt; profit) {
			profit = prices[i] - min;
		}
	}
	return profit;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[反转链表]]></title>
        <id>https://blog.ss1742.com/post/fan-zhuan-lian-biao</id>
        <link href="https://blog.ss1742.com/post/fan-zhuan-lian-biao">
        </link>
        <updated>2019-07-29T14:51:26.000Z</updated>
        <content type="html"><![CDATA[<p>反转一个单链表。</p>
<p>示例:</p>
<pre><code>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL
输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL
</code></pre>
<pre><code class="language-js">/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} head
 * @return {ListNode}
 */
// 常规
function reverseList1(head) {
	if (head === null || head.next === null) return head;
	let p = head.next;
	head.next = null;
	let temp = null;
	while (p !== null) {
		temp = p.next;
		p.next = head;
		head = p;
		p = temp;
	}
	return head;
}
// 递归
function reverseList2(head) {
	if (head === null || head.next === null) return head;
	let new_head = reverseList2(head.next);
	head.next.next = head;
	head.next = null;
	return new_head;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[合并区间]]></title>
        <id>https://blog.ss1742.com/post/he-bing-qu-jian</id>
        <link href="https://blog.ss1742.com/post/he-bing-qu-jian">
        </link>
        <updated>2019-07-29T14:46:54.000Z</updated>
        <content type="html"><![CDATA[<p>给出一个区间的集合，请合并所有重叠的区间。</p>
<p>示例 1:</p>
<pre><code>输入: [[1,3],[2,6],[8,10],[15,18]]
输出: [[1,6],[8,10],[15,18]]
解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].
</code></pre>
<p>示例 2:</p>
<pre><code>输入: [[1,4],[4,5]]
输出: [[1,5]]
解释: 区间 [1,4] 和 [4,5] 可被视为重叠区间。
</code></pre>
<pre><code class="language-js">function merge(intervals) {
	if (intervals.length &lt; 2) return intervals;
	intervals = intervals.sort((a, b) =&gt; a[0] - b[0]);
	return intervals.reduce((a, b) =&gt; {
		let temp = a[a.length - 1];
		if (temp[1] &lt; b[0]) {
			return [...a, b];
		} else {
			temp[1] = Math.max(temp[1], b[1]);
		}
		return a;
	}, [intervals[0]]);
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数组中的第K个最大元素]]></title>
        <id>https://blog.ss1742.com/post/shu-zu-zhong-de-di-k-ge-zui-da-yuan-su</id>
        <link href="https://blog.ss1742.com/post/shu-zu-zhong-de-di-k-ge-zui-da-yuan-su">
        </link>
        <updated>2019-07-29T14:41:52.000Z</updated>
        <content type="html"><![CDATA[<p>在未排序的数组中找到第 k 个最大的元素。</p>
<p>示例 :</p>
<pre><code>输入: [3,2,1,5,6,4] 和 k = 2
输出: 5
</code></pre>
<pre><code class="language-js">function findKthLargest(nums, k) {
	let temp = qSort(nums);
	return k &lt;= temp.length ? temp[k - 1] : null;
}
function qSort(nums) {
	if (nums.length &lt; 2) return nums;
	let left = [], right = [], temp = nums[0];
	for (let i = 0, len = nums.length; i &lt; len; i++) {
		if (nums[i] &lt; temp) {
			right.push(nums[i]);
		} else {
			left.push(nums[i]);
		}
	}
	return [...qSort(left), temp, ...qSort(right)];
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[简化路径]]></title>
        <id>https://blog.ss1742.com/post/jian-hua-lu-jing</id>
        <link href="https://blog.ss1742.com/post/jian-hua-lu-jing">
        </link>
        <updated>2019-07-29T14:36:37.000Z</updated>
        <content type="html"><![CDATA[<p>以 Unix 风格给出一个文件的绝对路径，你需要简化它。或者换句话说，将其转换为规范路径。</p>
<p>在 Unix 风格的文件系统中，一个点（.）表示当前目录本身；此外，两个点 （..） 表示将目录切换到上一级（指向父目录）；两者都可以是复杂相对路径的组成部分。更多信息请参阅：Linux / Unix中的绝对路径 vs 相对路径</p>
<p>请注意，返回的规范路径必须始终以斜杠 / 开头，并且两个目录名之间必须只有一个斜杠 /。最后一个目录名（如果存在）不能以 / 结尾。此外，规范路径必须是表示绝对路径的最短字符串。</p>
<p>示例</p>
<pre><code>输入：&quot;/a/./b/../../c/&quot;
输出：&quot;/c&quot;
解释：注意，最后一个目录名后面没有斜杠。
</code></pre>
<pre><code class="language-js">function simplifyPath(path) {
	let res = [];
	let paths = path.split('/');
	for (let i = 0, len = paths.length; i &lt; len; i++) {
		if (paths[i] === '..') {
			res.pop();
		} else if (paths[i] &amp;&amp; paths[i] !== '.') {
			res.push(paths[i]);
		}
	}
	return res.length &gt; 0 ? ('/' + res.join('/')) : '/';
}
</code></pre>
]]></content>
    </entry>
</feed>