<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.ss1742.com</id>
    <title>1742·小博文</title>
    <updated>2019-07-19T15:06:41.418Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.ss1742.com"/>
    <link rel="self" href="https://blog.ss1742.com/atom.xml"/>
    <subtitle>这是我的真博客</subtitle>
    <logo>https://blog.ss1742.com/images/avatar.png</logo>
    <icon>https://blog.ss1742.com/favicon.ico</icon>
    <rights>All rights reserved 2019, 1742·小博文</rights>
    <entry>
        <title type="html"><![CDATA[《深入浅出 React 和 Redux》[2]]]></title>
        <id>https://blog.ss1742.com/post/lesslessshen-ru-qian-chu-react-he-reduxgreatergreater-2</id>
        <link href="https://blog.ss1742.com/post/lesslessshen-ru-qian-chu-react-he-reduxgreatergreater-2">
        </link>
        <updated>2019-07-18T15:56:45.000Z</updated>
        <content type="html"><![CDATA[<h2 id="第2章-react-组件">第2章 React 组件</h2>
<h3 id="易于维护的设计要素">易于维护的设计要素</h3>
<blockquote>
<p>高内聚 把逻辑紧密相关的内容放在一个组件内<br>
低耦合 每个组件尽量独立，依赖关系尽量弱化</p>
</blockquote>
<h3 id="组件的数据">组件的数据</h3>
<p>对外用 <code>props</code>，对内用 <code>state</code></p>
<h4 id="proptypes-检查">propTypes 检查</h4>
<pre><code class="language-js">Person.propTypes = {
    name: PropTypes.string.isRequired,
    age: PropTypes.number
}

// 添加默认
Person.defaultProps = {
    name: ''
}
</code></pre>
<p>因为检查会消耗 <code>CPU</code> 资源，所以可以在开发的时候加上来避免一些错误，在发布的时候可以通过 <code>babel-react-optimize</code> 来去掉</p>
<h3 id="生命周期">生命周期</h3>
<p>本书中 <code>react</code> 版本 <code>v15.4</code> 太老，<code>v16.+</code> 部分生命周期方法废除，这一块后面总结</p>
<h4 id="constructor">constructor</h4>
<ol>
<li>初始化 <code>state</code></li>
<li>绑定成员函数的 <code>this</code> 环境</li>
</ol>
<p>tips</p>
<blockquote>
<p>this.foo = ::this.foo &lt;==&gt; this.foo = this.foo.bind(this)</p>
</blockquote>
<p>...</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[《深入浅出 React 和 Redux》[1]]]></title>
        <id>https://blog.ss1742.com/post/lesslessshen-ru-qian-chu-react-he-reduxgreatergreater-1</id>
        <link href="https://blog.ss1742.com/post/lesslessshen-ru-qian-chu-react-he-reduxgreatergreater-1">
        </link>
        <updated>2019-07-18T15:40:30.000Z</updated>
        <content type="html"><![CDATA[<h2 id="第1章">第1章</h2>
<h3 id="简介">简介</h3>
<ul>
<li><code>react</code> 不支持比 <code>IE8</code> 更低版本浏览器</li>
<li>通过组件（独立可重用的代码）开发应用。基于组件的应用开发是广泛使用的软件开发模式，用 <code>分而治之</code> 的方法，把一个大的应用分解成若干小的组件，每个组件只关注于某个小范围的特定功能</li>
</ul>
<h3 id="jsx">JSX</h3>
<ul>
<li><code>JSX</code>，是 <code>JavaScript</code>的语法扩展，让我们在 <code>JavaScript</code> 中可以编写像 <code>HTML</code> 一样的代码</li>
</ul>
<h4 id="进步还是倒退问题">进步还是倒退问题</h4>
<blockquote>
<p><code>JSX</code> 中的 <code>onClick</code> 和 <code>HTML</code> 中的 <code>onclick</code> 对比</p>
</blockquote>
<ul>
<li>
<p><code>HTML</code> 中的 <code>onclick</code></p>
<ol>
<li>处理函数是在全局环境下执行的，这污染全局环境，很容易产生意料不到的效果</li>
<li>给很多 <code>DOM</code> 添加 <code>onclick</code> 事件，可能会影响网页的性能，需要处理的事件函数越多，性能就越低</li>
<li>使用 <code>onclick</code> 的 <code>DOM</code>，如果要动态删掉，需要把对应的时间处理器注销，否则可能造成内存写漏并且不容易追踪到 <code>bug</code></li>
</ol>
</li>
<li>
<p><code>JSX</code></p>
<ol>
<li><code>JSX</code> 组件的 <code>onClick</code>，并没有直接使用 <code>onclick</code> 的 <code>html</code>，而是使用事件委托处理点击事件，最后都只在 <code>DOM</code> 树上添加了一个事件处理函数，挂在最顶层的 <code>DOM</code> 节点上</li>
<li><code>react</code> 中组件的生命周期，在 <code>unmount</code> 的时候自然能够清理所有相关的事件处理函数，内存泄露的问题得以解决</li>
</ol>
</li>
</ul>
<h3 id="eject">eject</h3>
<blockquote>
<p>npm run eject</p>
</blockquote>
<p>&quot;弹射&quot;（暴露并修改）<code>webpack</code>、<code>package.json</code> 等配置</p>
<h3 id="react-的工作方式">react 的工作方式</h3>
<p><code>react</code> 的理念</p>
<p><code>UI = render(data)</code></p>
<h3 id="virtual-dom">Virtual DOM</h3>
<p><code>DOM</code> 是结构化文本的抽象表达形式，特定于 <code>Web</code> 环境中</p>
<p><code>Virtual DOM</code> 是对 <code>DOM</code> 树的抽象，只是存在于 <code>JavaScript</code> 空间的树形结构</p>
<h3 id="tips">Tips</h3>
<p>设计原则：做同一件事的代码应该有高耦合性。<br>
纯函数：没有任何副作用，输出完全依赖输入的函数。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[react diff 原理浅析]]></title>
        <id>https://blog.ss1742.com/post/react-diff</id>
        <link href="https://blog.ss1742.com/post/react-diff">
        </link>
        <updated>2019-07-16T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<p><code>React</code> 通过制定大胆的 <code>diff</code> 策略，将 <code>O(n3)</code> 复杂度的问题转换成 <code>O(n)</code> 复杂度的问题；<br>
<code>React</code> 是如何将 <code>O(n3)</code> 复杂度的问题转换成 <code>O(n)</code> 的？</p>
<ul>
<li>只进行同级比较</li>
<li>不同类的 <code>React</code> 组件会被当做完全不同的 <code>DOM</code> 结构而被完全替换</li>
<li><code>key prop</code>：开发人员可以通过给 <code>Virtual DOM</code> 一个唯一的 <code>key</code> 属性暗示 <code>React</code> 这是同一个 <code>DOM</code> 结构，反之若 <code>key</code> 值不同则会被当做完全不同的 <code>DOM</code> 结构。</li>
</ul>
<p><code>React</code> 通过分层求异的策略，对 <code>tree diff</code> 进行算法优化；<br>
<code>React</code> 通过相同类生成相似树形结构，不同类生成不同树形结构的策略，对 <code>component diff</code> 进行算法优化。<br>
<code>React</code> 通过设置唯一 <code>key</code> 的策略，对 <code>element diff</code> 进行算法优化；</p>
<p>建议，在开发组件时，保持稳定的 <code>DOM</code> 结构会有助于性能的提升；<br>
建议，在开发过程中，尽量减少类似将最后一个节点移动到列表首部的操作，当节点数量过大或更新操作过于频繁时，在一定程度上会影响 <code>React</code> 的渲染性能。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Promise.all 实现原理]]></title>
        <id>https://blog.ss1742.com/post/promiseall-shi-xian-yuan-li</id>
        <link href="https://blog.ss1742.com/post/promiseall-shi-xian-yuan-li">
        </link>
        <updated>2019-07-16T13:45:08.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-js">Promise.prototype.all = function(promises) {
    return new Promise((resolve, reject) =&gt; {
        if (!isArray(promises)) {
            return reject(new TypeError('Arguments not Array'));
        }
        let resolves = 0;
        let len = promises.length;
        let result = [];
        for (let p of promises) {
            Promise.resolve(p).then(res =&gt; {
                resolves++;
                result.push(res);
                if (resolves === len) {
                    resolve(result);
                }
            }, rej =&gt; {
                return rekect(rej);
            })
        }
    })
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Promise.finally 实现原理]]></title>
        <id>https://blog.ss1742.com/post/promisefinally-shi-xian-yuan-li</id>
        <link href="https://blog.ss1742.com/post/promisefinally-shi-xian-yuan-li">
        </link>
        <updated>2019-07-16T13:21:51.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-js">Promise.prototype.finally = function(callback) {
    let P = this.constructor;
    return this.then(
        value  =&gt; P.resolve(callback()).then(() =&gt; value),
        reason =&gt; P.resolve(callback()).then(() =&gt; { throw reason })
    );
};
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Promise.race 实现原理]]></title>
        <id>https://blog.ss1742.com/post/promiserace-shi-xian-yuan-li</id>
        <link href="https://blog.ss1742.com/post/promiserace-shi-xian-yuan-li">
        </link>
        <updated>2019-07-16T12:41:33.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-js">Promise.prototype.race = function(promises) {
    return new Promise((resolve, reject) =&gt; {
        if (!isArray(promises)) {
            return reject(new TypeError('Arguments not Array'));
        }
        for (let p of promises) {
            Promise.resolve(p).then(
                res =&gt; resolve(res), 
                rej =&gt; reject(rej)
            )
        }
    })
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Promise 实现原理]]></title>
        <id>https://blog.ss1742.com/post/promise-shi-xian-yuan-li</id>
        <link href="https://blog.ss1742.com/post/promise-shi-xian-yuan-li">
        </link>
        <updated>2019-07-15T15:57:05.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-js">function myPromise(exe) {
    let self = this;
    self.status = 'pending';
    self.value = null;
    self.reason = null;
    self.onResolveCbk = [];
    self.onRejectCbk = [];
    function resolve(value) {
        if (self.status === 'pending') {
            self.value = value;
            self.status = 'resolved';
            self.onResolveCbk.map(fn =&gt; fn());
        }
    }
    function reject(reason) {
        if (self.status === 'pending') {
            self.reason = reason;
            self.status = 'rejected';
            self.onResolveCbk.map(fn =&gt; fn());
        }
    }
    exe(resolve, reject);
}

myPromise.prototype.then = function(onFulfilled, onRejected) {
    let self = this;
    if (self.status === 'pending') {
        self.onResolveCbk.push(() =&gt; onFulfilled(self.value));
        self.onRejectCbk.push(() =&gt; onRejected(self.reason));
    }
    if (self.status === 'resolved') {
        onFulfilled(self.value);
    }
    if (self.status === 'rejected') {
        onRejected(self.reason);
    }
}

let mp = new myPromise((resolve, reject) =&gt; {
    setTimeout(() =&gt; {
        resolve(2);
    }, 200);
});

mp.then(res =&gt; console.log('success', res));
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[new 实现原理]]></title>
        <id>https://blog.ss1742.com/post/new-de-shi-xian-yuan-li</id>
        <link href="https://blog.ss1742.com/post/new-de-shi-xian-yuan-li">
        </link>
        <updated>2019-07-15T12:44:11.000Z</updated>
        <content type="html"><![CDATA[<h3 id="原理">原理</h3>
<ol>
<li>创建一个空对象，构造函数中的 <code>this</code> 指向这个空对象</li>
<li>这个新对象被执行 <code>[[原型]]</code> 连接</li>
<li>执行构造函数方法，属性和方法被添加到 <code>this</code> 引用的对象中</li>
<li>如果构造函数中没有返回其它对象，那么返回 <code>this</code>，即创建的这个的新对象，否则，返回构造函数中返回的对象</li>
</ol>
<pre><code class="language-js">function _new(fn, ...arg) {
    let obj = Object.create(fn.prototype);
    let ret = fn.apply(obj, arg);
    return ret instanceof Object ? ret : obj;
}
</code></pre>
<p><code>Object.create()</code> 方法创建一个新对象，使用现有的对象来提供新创建的对象的 <code>__proto__</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[异步加载JS脚本的方式有哪些]]></title>
        <id>https://blog.ss1742.com/post/yi-bu-jia-zai-js-jiao-ben-de-fang-shi-you-na-xie</id>
        <link href="https://blog.ss1742.com/post/yi-bu-jia-zai-js-jiao-ben-de-fang-shi-you-na-xie">
        </link>
        <updated>2019-07-14T15:51:44.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p><code>&lt;script&gt;</code> 标签中增加 async(html5) 或者 defer(html4) 属性,脚本就会异步加载。</p>
</blockquote>
<p><code>defer</code> 和 <code>async</code> 的区别在于：</p>
<p><code>defer</code> 要等到整个页面在内存中正常渲染结束（DOM 结构完全生成，以及其他脚本执行完成），在 <code>window.onload</code> 之前执行；<br>
<code>async</code> 一旦下载完，渲染引擎就会中断渲染，执行这个脚本以后，再继续渲染。<br>
如果有多个 <code>defer</code> 脚本，会按照它们在页面出现的顺序加载<br>
多个 <code>async</code> 脚本不能保证加载顺序</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何让 (a == 1 && a == 2 && a == 3) 的值为true]]></title>
        <id>https://blog.ss1742.com/post/ru-he-rang-a-1-and-a-2-and-a-3-de-zhi-wei-true</id>
        <link href="https://blog.ss1742.com/post/ru-he-rang-a-1-and-a-2-and-a-3-de-zhi-wei-true">
        </link>
        <updated>2019-07-14T14:46:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="object-转换为原始类型">Object 转换为原始类型</h3>
<ul>
<li>
<p>如果部署了 <code>[Symbol.toPrimitive]</code> 接口，那么调用此接口，若返回的不是基本数据类型，抛出错误。</p>
</li>
<li>
<p>如果没有部署 <code>[Symbol.toPrimitive]</code> 接口，那么根据要转换的类型，先调用 <code>valueOf / toString</code></p>
<ul>
<li>非Date类型对象，<code>hint</code> 是 <code>default</code> 时，调用顺序为：<code>valueOf &gt;&gt;&gt; toString</code>，即 <code>valueOf</code> 返回的不是基本数据类型，才会继续调用 <code>valueOf</code>，如果 <code>toString</code> 返回的还不是基本数据类型，那么抛出错误。</li>
<li>如果 <code>hint</code> 是 <code>string</code>(Date对象的 <code>hint</code> 默认是 <code>string</code>) ，调用顺序为：<code>toString &gt;&gt;&gt; valueOf</code>，即 <code>toString</code> 返回的不是基本数据类型，才会继续调用 <code>valueOf</code>，如果 <code>valueOf</code> 返回的还不是基本数据类型，那么抛出错误。</li>
<li>如果 <code>hint</code> 是 <code>number</code>，调用顺序为： <code>valueOf &gt;&gt;&gt; toString</code></li>
</ul>
</li>
</ul>
<h3 id="题解">题解</h3>
<ol>
<li>隐式转换</li>
</ol>
<pre><code class="language-js">// 部署 [Symbol.toPrimitive] / valueOf / toString 均可
let a = {
    [Symbol.toPrimitive]: (function(hint) {
        let i = 1;
        return function() {
            return i++;
        }
    })()
}		
</code></pre>
<ol start="2">
<li>数据劫持</li>
</ol>
<pre><code class="language-js">let a = new Proxy({}, {
    i: 1,
    get: function() {
        return () =&gt; this.i++;
    }
})
</code></pre>
<ol start="3">
<li>数组的 <code>toString</code> 接口默认调用数组的 <code>join</code> 方法，重写 <code>join</code> 方法</li>
</ol>
<pre><code class="language-js">let a = [1, 2, 3];
a.join = a.shift;
</code></pre>
]]></content>
    </entry>
</feed>